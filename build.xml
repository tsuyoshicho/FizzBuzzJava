<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="FizzBuzzJava">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../PortableApps/EclipsePortable/App/Eclipse"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}/plugins/org.junit_4.10.0.v4_10_0_v20120426-0900/junit.jar"/>
        <pathelement location="${ECLIPSE_HOME}/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
        <pathelement location="lib/hamcrest-core-1.3.jar"/>
        <pathelement location="lib/junit-4.11.jar" />
    </path>
    <path id="FizzBuzzJava.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
    <path id="FizzBuzzJavaTest.classpath">
        <pathelement location="${junit.output.dir}"/>
        <path refid="FizzBuzzJava.classpath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="FizzBuzzJava.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="junit">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <classpath refid="FizzBuzzJava.classpath"/>
        </junit>
    </target>
    <target name="ProceduralFizzBuzzTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="info.dyndns.overflow.java.ProceduralFizzBuzzTest" todir="${junit.output.dir}"/>
            <classpath refid="FizzBuzzJava.classpath"/>
        </junit>
    </target>
    <target name="src">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <classpath refid="FizzBuzzJava.classpath"/>
        </junit>
    </target>
    <target name="test">
        <java classname="info.dyndns.overflow.java.SampleFizzBuzzMain" failonerror="true" fork="yes">
            <classpath refid="FizzBuzzJava.classpath"/>
        </java>
    </target>
    <target depends="build" name="test-all">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <batchtest todir="${junit.output.dir}">
              <fileset dir="test">
                <include name="**/*Test.java"/>
              </fileset>
            </batchtest>
            <classpath refid="FizzBuzzJava.classpath"/>
        </junit>
    </target>
    <target depends="build" name="test-ci">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="no" printsummary="withOutAndErr" failureProperty="test.failure" haltonfailure="test.error">
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${junit.output.dir}">
              <fileset dir="test">
                <include name="**/*Test.java"/>
              </fileset>
            </batchtest>
            <classpath refid="FizzBuzzJavaTest.classpath"/>
        </junit>
    </target>
    <target name="test-ci-log" depends="test-ci, verifyNoError, verifyNoFailure"/>
    <target name="verifyNoError" if="test.error">
        <fail message="JUnit test or tests errors."/>
    </target>
    <target name="verifyNoFailure" if="test.failure">
        <fail message="JUnit test or tests failed."/>
    </target>
    <target name="info.dyndns.overflow.java">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="info.dyndns.overflow.java.ProceduralFizzBuzzTest" todir="${junit.output.dir}"/>
            <classpath refid="FizzBuzzJava.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
